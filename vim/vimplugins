" vim: filetype=vim
" " " " " " " " " " " " " " " " " " " " " "
"    .  .  .  .  .  .  .  .  .  .  .  .   "
"   .  .  _  .  _  .  .  .|`|  .  .  .    "
"    .  o`.\,=./.`o .  . _|_|_  .  .  .   "
"   .  .  :(o o):  .  .  (o)o) .  .  .    "
"   ---ooO-(._.)-Ooo-ooO-(._.)-Ooo---     "
"    ╔═╗╦╔═╗╦  ╔═╗╔╗╔╔═╗╔╦╗╔═╗╔═╗╔╗╔      "
"    ║  ║║ ║║  ╠═╣║║║╚═╗ ║ ║╣ ║╣ ║║║      "
"    ╚═╝╩╚═╝╩═╝╩ ╩╝╚╝╚═╝ ╩ ╚═╝╚═╝╝╚╝`s    "
"           vimplugins file               "
"                                         "
" " " " " " " " " " " " " " " " " " " " " "
" ### Plugin Manager 
    " Vim-Plug Automatic installation if isn't installed
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

" ### Plugins Install
    call plug#begin('$HOME/.vim/plugged')
        " # Interface
            " Themes
                " Gruvbox - https://github.com/morhetz/gruvbox/blob/master/README.md
                Plug 'morhetz/gruvbox'
                " Vim Airline - https://github.com/vim-airline/vim-airline/wiki
                Plug 'vim-airline/vim-airline'
                " Glyphs Display
                Plug 'ryanoasis/vim-devicons'
    
        " # System Interaction
            " Nerd Tree File Manager - https://github.com/scrooloose/nerdtree/blob/master/README.markdown
            Plug 'scrooloose/nerdtree'
    
        " # Editing Helpers
            " Multiple Cursors in Vim - https://github.com/terryma/vim-multiple-cursors/wiki/Keystrokes-for-example-gifs
            Plug 'terryma/vim-multiple-cursors'
        " # Git Interaction
    
        " # Syntax Helpers
            " Color Codes Highlighting - https://github.com/chrisbra/Colorizer/blob/master/README.md
            Plug 'chrisbra/Colorizer'
            " Syntastic - Syntax checking - https://github.com/vim-syntastic/syntastic#introduction
            Plug 'scrooloose/syntastic'
            " QML Syntax highlight
            Plug 'peterhoeg/vim-qml'
    
    
    
        " # Programming Frameworks
            " WordPress
    call plug#end()

" ### Plugins Settings
    " # Vim Themes
        " Vim AirLine
            " Don't use PowerLine Arrows 
            let g:airline_powerline_fonts = 0
        
        " Gruvbox
            colorscheme gruvbox
            let g:gruvbox_contrast_light="medium"

    " # System Interaction
        " Nerd Tree File Manager
            " NerdTree Ignore list
                let NERDTreeIgnore = [
                    \'__pycache__',
                    \'\.pyc$', 
                    \'\.o$', 
                    \'\.so$', 
                    \'\.a$', 
                    \'\.swp', 
                    \'*\.swp', 
                    \'\.swo', 
                    \'\.swn', 
                    \'\.swh', 
                    \'\.swm', 
                    \'\.swl', 
                    \'\.swk', 
                    \'\.sw*$', 
                    \'[a-zA-Z]*egg[a-zA-Z]*', 
                    \'.DS_Store',
                \]
            "NerdTree Display Hidden Files
                let NERDTreeShowHidden=1
            "NerdTree Buffer Position
                let g:NERDTreeWinPos="left"
            "NerdTree Dir Arrows Replacements
                let g:NERDTreeDirArrowExpandable = '+'
                let g:NERDTreeDirArrowCollapsible = '-'
            "Start NerdTree automatically if Vim was opened with a directory as argument
                autocmd StdinReadPre * let s:std_in=1
                autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
            "Autoclose Vim if the only window left open is NerdTree
                autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
            "NerdTree Key shortcut
                map <C-t> :NERDTreeToggle<CR>

    " # Editing Helpers
        " Multiple Cursors in Vim - https://github.com/terryma/vim-multiple-cursors/wiki/Keystrokes-for-example-gifs
    
    " # Git Interaction

    " # Syntax Helpers
        " Syntastic - Syntax checking - https://github.com/vim-syntastic/syntastic#introduction
        " Color Codes Highlighting - https://github.com/chrisbra/Colorizer/blob/master/README.md
        " Display Devicons (Glyphs) in vim

    " # Programming Frameworks
        " WordPress






" ==== Completion
"
"   " ==== Autoclosing of quotes, parenthesis, brackets, etc
"   Plugin 'Raimondi/delimitMate'
"
"   " ==== Snippets
"   Plugin 'SirVer/ultisnips'
"   Plugin 'honza/vim-snippets'
"

"
"


"






"" ==== YCM and UltiSnips compatibility, with the helper of supertab
"let g:SuperTabDefaultCompletionType    = '<C-n>'
"let g:SuperTabCrMapping                = 0
"let g:UltiSnipsExpandTrigger           = '<tab>'
"let g:UltiSnipsJumpForwardTrigger      = '<tab>'
"let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
"let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']


" ==== Fix for using enter to select in YCM
:inoremap <expr> <Enter> pumvisible() ? "<Esc>a" : "<Enter>"





"" ==== Match Tag Always files
let g:mta_filetypes = {'html' : 1, 'eruby' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1, 'php' : 1}

"" ==== Syntastic
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_mri_args = "--config=$HOME/.jshintrc"
"let g:syntastic_python_checkers = [ 'pylint', 'flake8', 'pep8', 'pyflakes', 'python']
"let g:syntastic_yaml_checkers = ['jsyaml']
"let g:syntastic_html_tidy_exec = 'tidy5'
"
"" === flake8
"let g:flake8_show_in_file=1
"
"" ==== snippets
"let g:UltiSnipsExpandTrigger="<c-tab>"
"let g:UltiSnipsJumpForwardTrigger="<A-ENTER>"
"let g:UltiSnipsJumpBackwardTrigger="<A-BACKSPACE>"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
"" ==== disable swap file warning
"set shortmess+=A
"
"" ==== custom commands
"command JsonPretty execute ":%!python -m json.tool"
"set secure
"
" ==== Remember last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ==== Write as Sudo
cmap W w !sudo tee > /dev/null %i




