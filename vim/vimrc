" " " " " " " " " " " " " " " " " " " " "
"    .  .  .  .  .  .  .  .  .  .  .    "
"   .  .  _  .  _  .  .  .|`|  .  .     "
"    .  o`.\,=./.`o .  . _|_|_  .  .    "
"   .  .  :(o o):  .  .  (o)o) .  .     "
"    --ooO--(_)--Ooo-ooO--(_)--Ooo--    "
"    ╔═╗╦╔═╗╦  ╔═╗╔╗╔╔═╗╔╦╗╔═╗╔═╗╔╗╔    "
"    ║  ║║ ║║  ╠═╣║║║╚═╗ ║ ║╣ ║╣ ║║║    "
"    ╚═╝╩╚═╝╩═╝╩ ╩╝╚╝╚═╝ ╩ ╚═╝╚═╝╝╚╝`s  "
"               .vimrc file             "
"                                       "
" " " " " " " " " " " " " " " " " " " " "

" ### General Settings 
    set encoding=utf-8
    set nocompatible  " be iMproved, required
    filetype off  " required
    " Set Cursor Shape to block
    " NeoVim 
        " Normal/Command/Visual mode(s) still block cursor
        set guicursor=n-v-c:block-Cursor/lCursor
        " Insert mode blinking block cursor
        set guicursor=i:block-Cursor/lCursor-blinkon1
    " Vim (For VTE compatible terminals (urxvt, st, xterm, Konsole, etc) 
        let &t_SI = "\<Esc>[1 q"
        let &t_EI = "\<Esc>[2 q"



" Automatic installation for Vim-Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif



call plug#begin('~/.vim/plugged')


" ==== File tree
Plug 'scrooloose/nerdtree'

" ==== Git
"Plugin 'airblade/vim-gitgutter'
"Plugin 'tpope/vim-fugitive'

" ==== syntax helpers
Plug 'scrooloose/syntastic' "tons of languages syntax checker
"   Plugin 'tpope/vim-surround' "easy way to manipulate surroundings (parentheses, brackets, etc) e.g.
Plug 'Valloric/MatchTagAlways' "HTML tags matcher
Plug 'chrisbra/Colorizer' "preview colors in code while editing
"   Plugin 'terryma/vim-multiple-cursors' "multiple cursors in vim
"   Plugin 'ervandew/supertab'
" ==== Comment Plugin
"   Plugin 'scrooloose/nerdcommenter'
"   
" ==== Completion
"
"   " ==== Autoclosing of quotes, parenthesis, brackets, etc
"   Plugin 'Raimondi/delimitMate'
"   
"   " ==== Snippets
"   Plugin 'SirVer/ultisnips'
"   Plugin 'honza/vim-snippets'
"   
" ==== Status bar on bottom
Plug 'bling/vim-airline'
"   
"   " ==== QML Syntax highlight
"   Plugin 'peterhoeg/vim-qml'
"   
" ==== PLUGIN THEMES
Plug 'morhetz/gruvbox'
"   
" ==== devfonts plugin
Plug 'ryanoasis/vim-devicons' "display devicons (glyphs) in vim

call plug#end()




" ==== Colors and other basic settings
let g:gruvbox_contrast_light="medium"
colorscheme gruvbox
set guifont=Monospace\ 10
set fillchars+=vert:\║
syntax enable
if !has('nvim')
	set ttymouse=xterm2
endif
set mouse=a
set background=dark
set ignorecase
set smartcase
set expandtab

" = Transparent background
hi Normal ctermbg=none 
set ruler
set hidden
set number relativenumber
set laststatus=2
set shiftwidth=4
set tabstop=4
"let &colorcolumn="100"
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar
:set guioptions-=L  "remove left-hand scroll bar


" ==== YCM and UltiSnips compatibility, with the helper of supertab
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']


" ==== Fix for using enter to select in YCM
:inoremap <expr> <Enter> pumvisible() ? "<Esc>a" : "<Enter>"


" ==== NERDTREE
let NERDTreeIgnore = ['__pycache__', '\.pyc$', '\.o$', '\.so$', '\.a$', '\.swp', '*\.swp', '\.swo', '\.swn', '\.swh', '\.swm', '\.swl', '\.swk', '\.sw*$', '[a-zA-Z]*egg[a-zA-Z]*', '.DS_Store']
let NERDTreeShowHidden=1
let g:NERDTreeWinPos="left"
let g:NERDTreeDirArrows=0
autocmd StdinReadPre * let s:std_in=1

" == Start NERDTree automatically if no files were specified
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" == Start NERDTree automatically if vim was opened with a directory as argument
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" == Autoclose Vim if the only window left open is NerdTREE
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" == Key shortcut for NERDTree
map <C-t> :NERDTreeToggle<CR>

let g:airline_powerline_fonts = 1


"" ==== Match Tag Always files
let g:mta_filetypes = {'html' : 1, 'eruby' : 1, 'xhtml' : 1, 'xml' : 1, 'jinja' : 1, 'php' : 1}

"" ==== Syntastic
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_mri_args = "--config=$HOME/.jshintrc"
"let g:syntastic_python_checkers = [ 'pylint', 'flake8', 'pep8', 'pyflakes', 'python']
"let g:syntastic_yaml_checkers = ['jsyaml']
"let g:syntastic_html_tidy_exec = 'tidy5'
"
"" === flake8
"let g:flake8_show_in_file=1
"
"" ==== snippets
"let g:UltiSnipsExpandTrigger="<c-tab>"
"let g:UltiSnipsJumpForwardTrigger="<A-ENTER>"
"let g:UltiSnipsJumpBackwardTrigger="<A-BACKSPACE>"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
"" ==== disable swap file warning
"set shortmess+=A
"
"" ==== custom commands
"command JsonPretty execute ":%!python -m json.tool"
"set secure
"
" ==== Remember last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ==== Write as Sudo
cmap W w !sudo tee > /dev/null %i

" CLIPBOARD
" ==== Alias \"anonymous\" register to the \"*\" register 
set clipboard=unnamed

" ==== Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" ==== Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" ==== Command overrides for stupid CAPS LOCK possition
cnoreabbrev Q q




